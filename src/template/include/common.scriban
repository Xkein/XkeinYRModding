{{
func get_gen_type_name(name)
    ret "__Gen_Type_"+name
end

func get_calling_convention(callConvention)
    case callConvention
        when 2 # X86StdCall
            ret "__stdcall"
        when 3 # X86FastCall
            ret "__fastcall"
        else
            ret ""
    end
end

func is_private_or_protected(visibility)
    ret visibility == 2 || visibility == 3
end

func get_function_ptr_type(htFunction, htClass)
    $cpp_function = htFunction.cpp_function
    $func_type = $"{$cpp_function.return_type.full_name}"
    $func_type += "("
    $func_type += get_calling_convention($cpp_function.calling_convention)
    if $cpp_function.is_cxx_class_method && !$cpp_function.is_static
        $func_type += $" {htClass.cpp_class.name}::*"
    else
        $func_type += "*"
    end
    $func_type += ")"

    $arg_types = (htFunction.cpp_function.parameters | array.each do; ret $0.type.full_name; end) | array.join ", "
    $func_type += $"({$arg_types})"
    if $cpp_function.is_const
        $func_type += " const"
    end
    ret $func_type
end

func get_cpp_primitives()
    ret [
        "signed char",
        "unsigned char",
        "short",
        "unsigned short",
        "int",
        "unsigned int",
        "long",
        "unsigned long",
        "long long",
        "unsigned long long",
        "bool",
        "float",
        "double"
        ]
end

func append_line(src, line)
    if string.empty(line)
        ret src
    end
    ret src + "\n" + line 
end

func get_template_specialized_list(template, speTypes)
    ret speTypes | array.each do; ret string.replace(template, "{T}", $0); end
end

func array_contains_any_of(list, anyList)
    for key in anyList
        if array.contains(list, key)
            ret true
        end
    end
    ret false
end

func is_array_type(cppType)
    ret cppType.type_kind == 3
end
}}