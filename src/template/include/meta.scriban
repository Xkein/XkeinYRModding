{{ include 'include/common.scriban'

func user_gen_meta_class(htClass)
end
func user_gen_meta_enum(htEnum)
end

func meta_should_use_lambda(htFunction)
    case htFunction.cpp_function.calling_convention
        when 2, 3 # X86StdCall, X86FastCall
            ret true
        else
            ret false
    end
end

func gen_meta_class_function(htClass, htFunction)
    if should_skip_visibility(htClass, htFunction) || htFunction.is_deleted
        ret null
    end
    if htFunction.is_destructor
        ret null # dtor not supported yet
    end
    if htFunction.is_static 
        ret null # static not supported yet
    end
    $function_name = htFunction.name
    if $function_name | string.contains "operator"
        ret null # operator not supported yet
    end

    $use_lambda = meta_should_use_lambda(htFunction)
    $lambda = $use_lambda ? get_function_lambda_wrap(htFunction, htClass) : null
    if htFunction.is_constructor
        if htClass.is_abstract
            ret null
        end
        $arg_types = (htFunction.cpp_function.parameters | array.each do; ret $0.type.full_name; end) | array.join ", "
        if $use_lambda
            ret $'factory.ctor<{$lambda}>();'
        else
            ret $'factory.ctor<{$arg_types}>();'
        end
    end
    $class_name = htClass.cpp_class.name
    $func_type = get_function_ptr_type(htFunction, htClass)
    
    if $use_lambda
        ret $'factory.func<{$lambda}>("{$function_name}"_hs).prop("name"_hs, "{$function_name}");'
    else if htFunction.is_overload
        ret $'factory.func<static_cast<{$func_type}>(&{$class_name}::{$function_name})>("{$function_name}"_hs).prop("name"_hs, "{$function_name}");'
    else
        ret $'register_func<&{$class_name}::{$function_name}>(factory, "{$function_name}"_hs).prop("name"_hs, "{$function_name}");'
    end
end

func gen_meta_class_property(htClass, htProperty)
    if should_skip_visibility(htClass, htProperty) || htProperty.is_static
        ret null
    end
    $field_name = property.name
    if string.empty($field_name)
        ret null
    end
    $class_name = htClass.name
    ret $'register_data<&{$class_name}::{$field_name}>(factory, "{$field_name}"_hs).prop("name"_hs, "{$field_name}");'
end

func gen_meta_enum_constant(htEnum, htConstant)
    $enum_name = htEnum.name
    $enum_const_name = htConstant.name
    ret $'.data<{$enum_name}::{$enum_const_name}>("{$enum_const_name}"_hs).prop("name"_hs, "{$enum_const_name}")'
end

func gen_meta_class(htClass)
    $klass = $'auto factory = entt::meta<{htClass.class_name}>().type("{htClass.class_name}"_hs).prop("name"_hs, "{htClass.class_name}");'
    for base in htClass.base_classes
        $klass = append_line($klass, $"factory.base<{base.full_display_name}>();")
    end
    for function in htClass.all_functions
        $klass = append_line($klass, gen_meta_class_function(htClass, function))
    end
    for property in htClass.properties
        $klass = append_line($klass, gen_meta_class_property(htClass, property))
    end

    $klass = append_line($klass, user_gen_meta_class(htClass))
    ret $klass
end

func gen_meta_enum(htEnum)
    $enum = $'auto factory = entt::meta<{htEnum.enum_name}>().type("{htEnum.enum_name}"_hs).prop("name"_hs, "{htClass.enum_name}");'
    $enum = $'factory.'
    $enum += (htEnum.enum_constants | array.each do
            ret "   " + gen_meta_enum_constant(htEnum, $0)
        end) | array.join ", \n"
    $enum += "; \n"
    
    $klass = append_line($klass, user_gen_meta_enum(htEnum))
    ret $enum
end

func get_meta_gen_header()
    ret '// meta gen headers
#include "core/reflection/reflection_register.h"
#include <entt/core/hashed_string.hpp>
#include <entt/meta/meta.hpp>
#include <entt/meta/factory.hpp>
#include <entt/meta/policy.hpp>
using namespace entt::literals;
'
end

func gen_meta_register_snippet(htType)
    $snippet = ""
    if htType.is_class
        $snippet = append_line($snippet, $'void {htType.gen_type_name}::Register()')
        $snippet = append_line($snippet, '{')
        $snippet = append_line($snippet, $'   {gen_meta_class(htType)}')
        $snippet = append_line($snippet, '}')

        $snippet = append_line($snippet, $'void {htType.gen_type_name}::Unregister()')
        $snippet = append_line($snippet, '{')
        $snippet = append_line($snippet, $'   entt::meta_reset<{htType.class_name}>();')
        $snippet = append_line($snippet, '}')
    else if htType.is_enum
        $snippet = append_line($snippet, $'void {htType.gen_type_name}::Register()')
        $snippet = append_line($snippet, '{')
        $snippet = append_line($snippet, $'   {gen_meta_enum(htType)}')
        $snippet = append_line($snippet, '}')

        $snippet = append_line($snippet, $'void {htType.gen_type_name}::Unregister()')
        $snippet = append_line($snippet, '{')
        $snippet = append_line($snippet, $'   entt::meta_reset<{htType.enum_name}>();')
        $snippet = append_line($snippet, '}')
    else if htType.is_module
        $snippet = append_line($snippet, $'void {htType.gen_type_name}::Register()')
        $snippet = append_line($snippet, '{')
        $snippet = append_line($snippet, $'   sync_meta_ctx();')
        for klass in array.concat(module_classes, module_enums)
            if has_meta(klass.meta)
        $snippet = append_line($snippet, $'   {get_gen_type_name(klass.name)}::Register();')
            end
        end
        $snippet = append_line($snippet, '}')
        
        $snippet = append_line($snippet, $'void {htType.gen_type_name}::Unregister()')
        $snippet = append_line($snippet, '{')
        for klass in array.concat(module_classes, module_enums)
            if has_meta(klass.meta)
        $snippet = append_line($snippet, $'   {get_gen_type_name(klass.name)}::Unregister();')
            end
        end
        $snippet = append_line($snippet, '}')
    end
        
    ret $snippet
end
}}