{{- include 'include/meta.scriban'
    init_extra_vars(this)
    include 'include/yrpp.scriban'
    is_yrpp = module_name == "YRpp"
    is_yr_ext_core = module_name == "YrExtCore"
    is_gainput = module_name == "gainput"
-}}
#include "{{module_name}}.gen.h"
{{- if is_yr_ext_core }}
#include "yr/yr_all_events.h"
{{- for klass in module_classes }}
{{- if get_meta_tag(klass.meta, "HookEvent") }}
__IMPLEMENT_YR_HOOK_EVENT({{klass.full_name}})
{{- end; end }}
{{- end }}

{{- if !is_yrpp && module_name != "Wwise" && !is_gainput }}
#include "yr/extension_manager.h"
{{- end }}

{{- if is_gainput }}
#include "gainput/gainput.h"
{{- end }}

{{- for enum in module_enums}}
    {{- if has_meta(enum.meta) }}
{{-         if enum.source_file }}
#include "{{enum.source_file}}"
{{-         end }}
    {{- end }}
{{- end }}
{{- for klass in module_classes }}
    {{- if has_meta(klass.meta) }}
        {{- if !get_meta_tag(klass.meta, "HookEvent") }}
{{-             if klass.source_file }}
#include "{{klass.source_file}}"
{{-             end }}
        {{- end }}
        {{- if get_meta_tag(klass.meta, "YrExtension") }}
void OnExit_{{klass.name}}();
struct ModuleImpl_{{klass.name}} {
    {{klass.full_name}} ext;
    ModuleImpl_{{klass.name}}() {
        ExtensionManager::AddExtension(&ext);
        atexit(OnExit_{{klass.name}});
    }
    ~ModuleImpl_{{klass.name}}() {
        ExtensionManager::RemoveExtension(&ext);
    }
} _ModuleImpl_{{klass.name}};
void OnExit_{{klass.name}}() {
    ExtensionManager::RemoveExtension(&_ModuleImpl_{{klass.name}}.ext);
}
        {{- end }}
    {{- end }}
{{- end }}


// ==== class registrations begin
{{- if is_yrpp }}
#include <CRC.h>
#include <TubeClass.h>
#include <PixelFXClass.h>
#include <TriggerTypeClass.h>
#include <FoggedObjectClass.h>
#include <Blitters/Blitter.h>
#include <YRDDraw.h>
#include <IsometricTileTypeClass.h>
#include <EventClass.h>
#include <YRPP.h>
#include "yr/reflection/yr_container.h"
{{- end }}
#include "core/reflection/reflection_register.h"
#include <entt/core/hashed_string.hpp>
#include <entt/meta/meta.hpp>
#include <entt/meta/factory.hpp>
#include <entt/meta/policy.hpp>
using namespace entt::literals;

{{ for klass in module_classes }}
{{-
if !has_meta(klass.meta) || get_meta_tag(klass.meta, "HookEvent")
    continue
end
component_target_list = get_derived_classes_by_list(get_meta_list(klass.meta, "ComponentTarget"))
has_component_target = array.size(component_target_list) > 0
is_ini_component = get_meta_tag(klass.meta, "IniComponent")
is_ini_auto_load = get_meta_tag(klass.meta, "IniAutoLoad")
component_target_to_techno = array_contains_any_of(component_target_list, ["AircraftTypeClass", "BuildingTypeClass", "InfantryTypeClass", "UnitTypeClass"])
component_target_to_terrain = array.contains(component_target_list, "TerrainTypeClass")
component_target_to_bullet = array.contains(component_target_list, "BulletTypeClass")
component_target_to_anim = array.contains(component_target_list, "AnimTypeClass")
component_target_to_house = array.contains(component_target_list, "HouseTypeClass")
component_target_to_super = array.contains(component_target_list, "SuperWeaponTypeClass")
component_target_to_weapon = array.contains(component_target_list, "WeaponTypeClass")
component_target_to_warhead = array.contains(component_target_list, "WarheadTypeClass")
component_target_to_theme = array.contains(component_target_list, "ThemeControl")
is_savegame = get_meta_tag(klass.meta, "AutoSavegame")
}}
{{- if has_component_target }}
#include "yr/component/component.h"
#include <GameClasses.h>
{{- end }}
{{- if is_ini_component && component_target_to_theme }}
#include <ThemeClass.h>
{{- end}}
{{- if is_savegame }}
#include "yr/serialization/serialization.h"
{{- end }}

{{- if is_ini_component }}
#include "yr/parse/ini_reader.h"
#include "yr/component/ini_component.h"
#include <GameClasses.h>
#include <IsometricTileTypeClass.h>
static bool LoadIni_{{klass.name}}({{klass.full_name}}& iniComponent, IniReader& reader, const char* pSection)
{
    bool success = false;
{{- for property in klass.properties ; $cpp_field = property.cpp_field
    if should_skip_visibility(klass, property) || string.empty(property.name) || property.is_static || property.is_const || property.is_constexpr
        continue
    end
    $ini_key = get_meta_value(property.meta, "IniField") ?? property.name
    }}
    success |= IniComponentLoader::Load(reader, pSection, "{{$ini_key}}", iniComponent.{{property.name}});
{{- end }}
    return success;
}

{{- end }}

{{- if is_savegame }}
template<typename Archive>
void Serialize_{{klass.name}}(Archive& ar, {{klass.full_name}}& data) {
    ar.startNode();
    Serialization::CallPrologue(ar, data);
    std::string typeName = entt::type_id<{{klass.full_name}}>().name().data();
    // Serialization::Serialize(cereal::make_nvp("$type", typeName));
    {{- is_swizzleable = get_meta_tag(klass.meta, "Swizzleable")
        if is_swizzleable }}
    {{klass.full_name}}* pThis = &data;
    Serialization::Serialize(cereal::make_nvp("$ptr", pThis));
    if constexpr(std::is_same_v<Archive, SERIALIZATION_INPUT_ARCHIVE>) {
        SwizzleManagerClass::Instance->Here_I_Am(reinterpret_cast<long>(pThis), &data);
    }
    {{- end }}
    {{- for property in klass.properties ; $cpp_field = property.cpp_field
        if should_savegame(klass, property) || string.empty(property.name) || property.is_static || property.is_const || property.is_constexpr
            continue
        end }}
        Serialization::Serialize(cereal::make_nvp("{{property.name}}", data.{{property.name}}));
    {{- end }}
    Serialization::CallEpilogue(ar, data);
    ar.finishNode();
}

{{- end }}

void {{get_gen_type_name(klass.name)}}__Register()
{
    auto factory = entt::meta_factory<{{klass.full_name}}>().type("{{klass.full_name}}"_hs).custom<ClassMeta>("{{klass.name}}");
{{ for base in klass.base_classes}}
    factory.base<{{base.full_display_name}}>();
{{- end }}
{{ for function in klass.all_functions}}
{{- $function_name = function.name
    if should_skip_visibility(klass, function) || function.is_deleted
        continue
    end
    if function.is_destructor || $function_name | string.contains "operator"
        continue # not supported yet
    end
    if function.cpp_function.is_function_template}}
    // skip template function: {klass.cpp_class.name}::{$function_name}
{{-     continue
    end
    if function.is_constructor
        if klass.is_abstract
            continue
        end}}
    factory.ctor<{{(function.cpp_function.parameters | array.each do; ret $0.type.full_name; end) | array.join ", "}}>();
{{-     continue
    end
    $class_name = klass.name
    $class_full_name = klass.full_name
    $func_type = get_function_ptr_type(function, klass)
    
    $meta_args = "std::vector<ParameterMeta>{"
    for arg in function.cpp_function.parameters
        $meta_args += ' ParameterMeta{'
        $meta_args += $'"{arg.name}"'
        $meta_args += '},'
    end
    $meta_args += " }"
    if function.is_overload }}
    register_func<static_cast<{{$func_type}}>(&{{$class_full_name}}::{{$function_name}})>(factory, "{{$function_name}}"_hs).custom<FunctionMeta>("{{$function_name}}", {{$meta_args}});
{{  else }}
    register_func<&{{$class_full_name}}::{{$function_name}}>(factory, "{{$function_name}}"_hs).custom<FunctionMeta>("{{$function_name}}", {{$meta_args}});
{{- end }}
{{- end }}

{{ for property in klass.properties}}
{{- $field_name = property.name
    if should_skip_visibility(klass, property) || string.empty($field_name)
        continue
    end
    $class_name = klass.name
    $class_full_name = klass.full_name
    if property.is_bit_field }}
    // skip bit field: {{$class_full_name}}::{{$field_name}}
{{-     continue
    end
    if property.is_static }}
    register_data<std::addressof({{$class_full_name}}::{{$field_name}})>(factory, "{{$field_name}}"_hs).custom<FieldMeta>("{{$field_name}}");
{{- else }}
    register_data<&{{$class_full_name}}::{{$field_name}}>(factory, "{{$field_name}}"_hs).custom<FieldMeta>("{{$field_name}}");
{{- end
end }}

{{ for target_type in component_target_list }}
    ComponentInstantiation::RegisterComponentInstantiation<{{klass.full_name}}, {{target_type}}>();
{{- end}}
{{ if is_ini_component}}
    IniComponentLoader::RegisterLoader<{{klass.full_name}}, &LoadIni_{{klass.name}}>(factory);
{{- end}}
{{ if is_ini_auto_load}}
    IniComponentLoader::RegisterAutoLoad<{{klass.full_name}}>(factory);
{{- end}}
{{- if is_ini_component && component_target_to_techno }}
    IniComponentLoader::RegisterLoadingComponent<TechnoTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_terrain }}
    IniComponentLoader::RegisterLoadingComponent<TerrainTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_bullet }}
    IniComponentLoader::RegisterLoadingComponent<BulletTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_anim }}
    IniComponentLoader::RegisterLoadingComponent<AnimTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_house }}
    IniComponentLoader::RegisterLoadingComponent<HouseTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_super }}
    IniComponentLoader::RegisterLoadingComponent<SuperWeaponTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_weapon }}
    IniComponentLoader::RegisterLoadingComponent<WeaponTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_warhead }}
    IniComponentLoader::RegisterLoadingComponent<WarheadTypeClass, {{klass.full_name}}>();
{{- end }}
{{- if is_ini_component && component_target_to_theme }}
    IniComponentLoader::RegisterLoadingComponent<ThemeControl, {{klass.full_name}}>();
{{- end }}
{{ if is_savegame }}
    Serialization::RegisterSerialization<{{klass.full_name}}, &Serialize_{{klass.name}}, &Serialize_{{klass.name}}>();
{{- end}}
}
void {{get_gen_type_name(klass.name)}}__Unregister()
{
    entt::meta_reset<{{klass.full_name}}>();
}

{{- end }}

// ==== class registrations end

// ==== enum registrations begin

{{  for enum in module_enums
    if !has_meta(enum.meta) || get_meta_tag(enum.meta, "HookEvent")
        continue
    end }}
void {{get_gen_type_name(enum.name)}}__Register()
{
    auto factory = entt::meta_factory<{{enum.full_name}}>().type("{{enum.full_name}}"_hs).custom<EnumMeta>("{{enum.enum_name}}");
{{ for enum_constant in enum.enum_constants ; $enum_const_name = htConstant.name }}
    factory.data<{{enum.full_name}}::{{$enum_const_name}}>("{{$enum_const_name}}"_hs).custom<EnumConstantMeta>("{{$enum_const_name}}");
{{- end }}
}
    
void {{get_gen_type_name(enum.name)}}__Unregister()
{
    entt::meta_reset<{{enum.full_name}}>();
}
{{- end }}
// ==== enum registrations end

void {{gen_type_name}}::Register()
{
    sync_meta_ctx();
{{for klass in array.concat(module_classes, module_enums)
    if has_meta(klass.meta) && !get_meta_tag(klass.meta, "HookEvent") }}
    {{get_gen_type_name(klass.name)}}__Register();
    {{-end
end }}
}
void {{gen_type_name}}::Unregister()
{
    sync_meta_ctx();
{{for klass in array.concat(module_classes, module_enums)
    if has_meta(klass.meta) && !get_meta_tag(klass.meta, "HookEvent") }}
    {{get_gen_type_name(klass.name)}}__Unregister();
    {{-end
end }}
}
