{{ include 'include/meta.scriban'
    if !has_meta(meta) || get_meta_tag(meta, "HookEvent")
        ret
    end
    init_extra_vars(this)
}}
#include "{{type_name}}.gen.h"

{{- include 'yr/yrpp.scriban'
component_target_list = get_derived_classes_by_list(get_meta_list(meta, "ComponentTarget"))
has_component_target = array.size(component_target_list) > 0
is_ini_component = get_meta_tag(meta, "IniComponent")
func user_gen_meta_class(htClass)
    $result = ""
    for target_type in component_target_list
        $result = append_line($result, $'ComponentInstantiation::RegisterComponentInstantiation<{type_name}, {target_type}>();')
    end
    if is_ini_component
        $result = append_line($result, $'IniComponentLoader::Register<{type_name}, &LoadIni_{type_name}>(factory);')
    end
    ret $result
end }}
{{- if has_component_target }}
#include "yr/component/component.h"
{{- end }}
{{- if is_ini_component }}
#include "yr/parse/ini_reader.h"
#include "yr/component/ini_component.h"
#include <GameClasses.h>
#include <IsometricTileTypeClass.h>
static bool LoadIni_{{type_name}}({{type_name}}& iniComponent, IniReader& reader, const char* pSection)
{
{{ for property in class_properties ; $cpp_field = property.cpp_field
    if should_skip_visibility(this, property) || string.empty(property.name) || property.is_static || property.is_const || property.is_constexpr
        continue
    end
    $ini_key = get_meta_value(property.meta, "IniField") ?? property.name
    -}}
    if (!IniComponentLoader::Load(reader, pSection, "{{$ini_key}}", iniComponent.{{property.name}}))
        return false;
{{- end }}
    return true;
}
#include "yr/yr_all_events.h"
{{- if is_ini_component }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrTechnoTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pTechnoType, E->pIni);
}
{{- end }}
{{- end }}

{{get_meta_gen_header()}}
{{gen_meta_register_snippet(this)}}
