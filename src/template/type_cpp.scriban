{{ include 'include/meta.scriban'
    if !has_meta(meta) || get_meta_tag(meta, "HookEvent")
        ret
    end
    init_extra_vars(this)
}}
#include "{{type_name}}.gen.h"

{{- include 'yr/yrpp.scriban'
component_target_list = get_derived_classes_by_list(get_meta_list(meta, "ComponentTarget"))
has_component_target = array.size(component_target_list) > 0
is_ini_component = get_meta_tag(meta, "IniComponent")
is_ini_component_techno = is_ini_component && array_contains_any_of(component_target_list, ["AircraftTypeClass", "BuildingTypeClass", "InfantryTypeClass", "UnitTypeClass"])
is_ini_component_terrain = is_ini_component && array.contains(component_target_list, "TerrainTypeClass")
is_ini_component_bullet = is_ini_component && array.contains(component_target_list, "BulletTypeClass")
is_ini_component_anim = is_ini_component && array.contains(component_target_list, "AnimTypeClass")
is_ini_component_house = is_ini_component && array.contains(component_target_list, "HouseTypeClass")
is_ini_component_super = is_ini_component && array.contains(component_target_list, "SuperWeaponTypeClass")
is_ini_component_weapon = is_ini_component && array.contains(component_target_list, "WeaponTypeClass")
is_ini_component_warhead = is_ini_component && array.contains(component_target_list, "WarheadTypeClass")
is_ini_component_theme = is_ini_component && array.contains(component_target_list, "ThemeControl")
func user_gen_meta_class(htClass)
    $result = ""
    for target_type in component_target_list
        $result = append_line($result, $'ComponentInstantiation::RegisterComponentInstantiation<{type_name}, {target_type}>();')
    end
    if is_ini_component
        $result = append_line($result, $'IniComponentLoader::Register<{type_name}, &LoadIni_{type_name}>(factory);')
    end
    ret $result
end }}
{{- if has_component_target }}
#include "yr/component/component.h"
#include <GameClasses.h>
{{- end }}
{{- if is_ini_component_theme }}
#include <ThemeClass.h>
{{- end}}
{{- if is_ini_component }}
#include "yr/parse/ini_reader.h"
#include "yr/component/ini_component.h"
#include <GameClasses.h>
#include <IsometricTileTypeClass.h>
static bool LoadIni_{{type_name}}({{type_name}}& iniComponent, IniReader& reader, const char* pSection)
{
    bool success = false;
{{- for property in class_properties ; $cpp_field = property.cpp_field
    if should_skip_visibility(this, property) || string.empty(property.name) || property.is_static || property.is_const || property.is_constexpr
        continue
    end
    $ini_key = get_meta_value(property.meta, "IniField") ?? property.name
    }}
    success |= IniComponentLoader::Load(reader, pSection, "{{$ini_key}}", iniComponent.{{property.name}});
{{- end }}
    return success;
}
#include "yr/yr_all_events.h"
{{- if is_ini_component_techno }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrTechnoTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pTechnoType, E->pIni);
}
{{- end }}
{{- if is_ini_component_terrain }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrTerrainTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pTerrainType, E->pIni);
}
{{- end }}
{{- if is_ini_component_bullet }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrBulletTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pBulletType, E->pIni);
}
{{- end }}
{{- if is_ini_component_anim }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrAnimTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pAnimType, E->pIni);
}
{{- end }}
{{- if is_ini_component_house }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrHouseTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pHouseType, E->pIni);
}
{{- end }}
{{- if is_ini_component_super }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrSuperWeaponTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pSuperWeaponType, E->pIni);
}
{{- end }}
{{- if is_ini_component_weapon }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrWeaponTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pWeaponType, E->pIni);
}
{{- end }}
{{- if is_ini_component_warhead }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrWarheadTypeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->pWarheadType, E->pIni);
}
{{- end }}
{{- if is_ini_component_theme }}
DEFINE_YR_HOOK_EVENT_LISTENER(YrThemeLoadIniEvent) {
    IniComponentLoader::LoadComponent<{{type_name}}>(E->themeCtrl, E->pIni);
}
{{- end }}
{{- end }}

{{get_meta_gen_header()}}
{{gen_meta_register_snippet(this)}}
